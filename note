#!/usr/bin/env python 

import sys
import os
import subprocess

NOTES_PATH = "/home/antox/docs/notes/content/"
EDITOR = "nvim"

HEADER = '\033[95m'
BLUE = '\033[94m'
GREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

def find_notes(keyword, in_file=False):
    # Get all the notes within a directory containing the keyword, 
    # and notes with the keyword in their filename.
    # if in_file is True, also try to check if the keyword is within the content of the file (slower)

    result = []
    for dirpath, dnames, fnames in os.walk(NOTES_PATH):
        for fname in fnames:
            if fname.endswith(".md"):
                fpath = os.path.join(dirpath[len(NOTES_PATH):],fname)

                if (keyword.lower() in fname.lower() or \
                    keyword.lower() in dirpath.lower()) or \
                    (in_file and keyword.lower() in open(NOTES_PATH + fpath, "r").read().lower()):
                        result.append(fpath)
    return result

def open_note(path):
    # Open the given note in vim
    path = NOTES_PATH + path

    print("Opening {}".format(path))
    
    # Yup calling system on user's input is'nt safe but it's only for me so f*ck it
    os.system("{} {}".format(EDITOR, path))


def print_notes(notes):
    for i, note in enumerate(notes):
        print("[{}{}{}] - {}".format(BOLD, i,ENDC,  note.replace("/", " -> ").replace(".md", "")))
 
def ask_which_note(notes):

    # Ask which note the user want to open, and return it's path
    print_notes(notes)
   
    while True:

        try:
            n = int(input("Which one do you wanna open ?\n>"))

            if n < 0 or n > len(notes):
                print("{} Invalid input. {}".format(FAIL, ENDC))
            else:
                return notes[n]

        except ValueError:
            print("{} Give me an integer please ;){}".format(FAIL, ENDC))
        except KeyboardInterrupt:
            print("{} Cya..{}".format(BLUE, ENDC))
            sys.exit(1)

if __name__ == '__main__':

    if len(sys.argv) < 2 :
        print("{}Usage : {} <keyword>{}".format(WARNING, sys.argv[0].split("/")[-1], ENDC))
        sys.exit(1)
    
    if sys.argv[1] in ['-l', '--list', 'list']:
        print_notes(find_notes(""))
        sys.exit(0)
    elif sys.argv[1] in ['start', '--start', '-s']:
        os.system("cd ~/docs/notes && pelican -rl content/")
    elif len(sys.argv) > 2 and sys.argv[1] == '-i':
        notes = find_notes(sys.argv[2], in_file=True)
    else:
        notes = find_notes(sys.argv[1])


    if len(notes) == 0:
        print("{}No note found.{}".format(FAIL, ENDC))
    elif len(notes) == 1:
        open_note(notes[0])
    else:
        open_note(ask_which_note(notes))


